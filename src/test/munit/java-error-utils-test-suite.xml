<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:java="http://www.mulesoft.org/schema/mule/java"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
http://www.mulesoft.org/schema/mule/java http://www.mulesoft.org/schema/mule/java/current/mule-java.xsd">
    <munit:config name="java-error-utils-test-suite.xml"/>

    <munit:test name="getRootCauseObtainsNestedCause">
        <munit:execution>
            <flow-ref name="dummyFlow"/>

            <java:new class="java.lang.NullPointerException" constructor="NullPointerException(java.lang.String)">
                <java:args>
                    #[{
                    arg0: "Some NPE"
                    }]
                </java:args>
            </java:new>

            <set-variable variableName="NPE" value="#[payload]"/>

            <java:new class="java.lang.RuntimeException" constructor="RuntimeException(java.lang.String,java.lang.Throwable)">
                <java:args>
                    #[{
                    arg0: "Some Runtime",
                    arg1: vars.NPE
                    }]
                </java:args>
            </java:new>

            <set-variable variableName="WITH_NPE_CAUSE" value="#[payload]"/>

            <java:new class="org.mule.extensions.java.api.exception.ClassNotFoundModuleException" constructor="ClassNotFoundModuleException(java.lang.String,java.lang.Throwable)">
                <java:args>
                    #[{
                    arg0: "No class",
                    arg1: vars.WITH_NPE_CAUSE
                    }]
                </java:args>
            </java:new>

            <set-variable variableName="testException" value="#[payload]"/>

            <java:invoke-static class="org.mule.extensions.java.internal.util.JavaExceptionUtils" method="getRootCause(java.lang.Throwable)">
                <java:args>
                    #[{
                    arg0: vars.testException
                    }]
                </java:args>
            </java:invoke-static>

        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that
                    expression="#[payload]"
                    is="#[MunitTools::equalTo(vars.NPE)]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="isCausedByIsTrueTopExactType">
        <munit:execution>
            <flow-ref name="dummyFlow"/>

            <java:new class="java.lang.NullPointerException" constructor="NullPointerException(java.lang.String)">
                <java:args>
                    #[{
                    arg0: "Some NPE"
                    }]
                </java:args>
            </java:new>

            <set-variable variableName="NPE" value="#[payload]"/>

            <java:new class="java.lang.RuntimeException" constructor="RuntimeException(java.lang.String,java.lang.Throwable)">
                <java:args>
                    #[{
                    arg0: "Some Runtime",
                    arg1: vars.NPE
                    }]
                </java:args>
            </java:new>

            <set-variable variableName="WITH_NPE_CAUSE" value="#[payload]"/>

            <java:invoke-static class="org.mule.extensions.java.internal.util.JavaExceptionUtils" method="isCausedBy(java.lang.Throwable,java.lang.Class,boolean)">
                <java:args>
                    #[{
                    arg0: vars.WITH_NPE_CAUSE,
                    arg1: "java.lang.RuntimeException",
                    arg2: false
                    }]
                </java:args>
            </java:invoke-static>


        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that
                    expression="#[payload]"
                    is="#[MunitTools::equalTo(true)]"/>
        </munit:validation>
    </munit:test>


    <flow name="dummyFlow">
        <set-payload value="Test Event"/>
    </flow>

</mule>
